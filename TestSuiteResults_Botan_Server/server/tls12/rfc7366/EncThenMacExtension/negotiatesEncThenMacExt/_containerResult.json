{"finished":true,"Score":{"SECURITY":{"overwritten":false,"Reached":0.0,"Total":0.0,"SeverityLevel":"LOW","Percentage":100.0},"CRYPTO":{"overwritten":false,"Reached":0.0,"Total":0.0,"SeverityLevel":"INFORMATIONAL","Percentage":100.0},"COMPLIANCE":{"overwritten":false,"Reached":0.0,"Total":0.0,"SeverityLevel":"INFORMATIONAL","Percentage":100.0},"HANDSHAKE":{"overwritten":false,"Reached":0.0,"Total":0.0,"SeverityLevel":"INFORMATIONAL","Percentage":100.0},"RECORDLAYER":{"overwritten":false,"Reached":0.0,"Total":0.0,"SeverityLevel":"LOW","Percentage":100.0}},"TestMethod":{"Description":"The use of encrypt-then-MAC is negotiated via TLS/DTLS extensions as defined in TLS [2].  On connecting, the client includes the encrypt_then_mac extension in its client_hello if it wishes to use encrypt-then-MAC rather than the default MAC-then-encrypt.  If the server is capable of meeting this requirement, it responds with an encrypt_then_mac in its server_hello.","TlsVersion":"TLS12","RFC":{"number":7366,"Section":"2.  Negotiating Encrypt-then-MAC"},"MethodName":"negotiatesEncThenMacExt","DisplayName":"negotiatesEncThenMacExt(ArgumentsAccessor, WorkflowRunner)","ClassName":"de.rub.nds.tlstest.suite.tests.server.tls12.rfc7366.EncThenMacExtension"},"Result":"DISABLED","HasStateWithAdditionalResultInformation":false,"HasVaryingAdditionalResultInformation":false,"DisabledReason":"Encrypt-Then-Mac Extension not supported","FailedReason":null,"ElapsedTime":67,"StatesCount":0,"FailureInducingCombinations":null,"States":[]}